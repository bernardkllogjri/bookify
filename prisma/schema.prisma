datasource db {
  provider          = "mysql"
  relationMode      = "prisma"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ProductImage {
  id        String  @id @default(cuid())
  productId String
  src       String
  alt       String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model Review {
  id        String  @id @default(cuid())
  productId String
  rating    Float
  comment   String? @db.Text
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model ProductBreadcrumb {
  id        String  @id @default(cuid())
  productId String
  name      String
  href      String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model ProductHighlights {
  id        String  @id @default(cuid())
  name      String  @db.Text
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model Product {
  id          String              @id @default(cuid())
  name        String
  price       String
  imageSrc    String
  images      ProductImage[]
  reviews     Review[]
  imageAlt    String
  rating      Float
  metadata    Json?
  description String  @db.Text
  highlights  ProductHighlights[]
  details     String  @db.Text
  breadcrumbs ProductBreadcrumb[]
}
